Resources:

  SubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: ${param:resourceprefix}sg
      Description: Cache Subnet Group
      SubnetIds:
        - !Ref SubnetAPrivate
        - !Ref SubnetBPrivate
        - !Ref SubnetCPrivate

  # LogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: !Sub /ecs/${param:resourcenamespace}

  SourceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub ${param:resourceprefix}internal-sg
      GroupName: !Sub ${param:resourceprefix}ecs-service
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: '10.${param:vpcSecondDigitCidrBlock}.0.0/16'
          IpProtocol: 'TCP'
          FromPort: 0
          ToPort: 65535

#  FrontEndHostingBucket:
#    Type: AWS::S3::Bucket
#    Properties:
#      BucketName: !Sub ${param:resourceprefix}frontend-bucket

#  DNS:
#    Type: AWS::Route53::HostedZone
#    Properties:
#      HostedZoneConfig:
#        Comment: '${param:rootDomain}'
#      Name: '${param:rootDomain}'

#  IrelandCertificate:
#    Type: 'AWS::CertificateManager::Certificate'
#    Properties:
#      DomainName: '*.${param:rootDomain}'
#      ValidationMethod: DNS
#      DomainValidationOptions:
#        - DomainName: '*.${param:rootDomain}'
#          HostedZoneId: !Ref DNS
        # ValidationDomain: String

  ArtifactBucket:
    Type: AWS::S3::Bucket
    # DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${param:resourceprefix}artifact-bucket

#  OriginAccessControl:
#    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
#    Properties:
#      CloudFrontOriginAccessIdentityConfig:
#        Comment: ${sls:stage}OAI
